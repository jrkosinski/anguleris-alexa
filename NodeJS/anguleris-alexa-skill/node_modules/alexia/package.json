{
  "_args": [
    [
      {
        "raw": "alexia",
        "scope": null,
        "escapedName": "alexia",
        "name": "alexia",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Clients\\Anguleris\\Code\\anguleris-alexa-skill"
    ]
  ],
  "_from": "alexia@latest",
  "_id": "alexia@2.4.0",
  "_inCache": true,
  "_location": "/alexia",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/alexia-2.4.0.tgz_1482142308238_0.021014194237068295"
  },
  "_npmUser": {
    "name": "glogo",
    "email": "gloger.michael@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "alexia",
    "scope": null,
    "escapedName": "alexia",
    "name": "alexia",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/alexia/-/alexia-2.4.0.tgz",
  "_shasum": "1502411762cf35c323d708a72a9ef9515d06ff14",
  "_shrinkwrap": null,
  "_spec": "alexia",
  "_where": "D:\\Clients\\Anguleris\\Code\\anguleris-alexa-skill",
  "author": {
    "name": "Matthew D. Lancaster",
    "email": "matthew.d.lancaster@accenture.com",
    "url": "https://www.accenture.com/us-en"
  },
  "bugs": {
    "url": "https://github.com/Accenture/alexia/issues",
    "email": "michael.gloger@accenture.com"
  },
  "contributors": [
    {
      "name": "Slavomir Kubacka",
      "email": "slavomir.kubacka@accenture.com"
    },
    {
      "name": "Michal Morvay"
    },
    {
      "name": "Michael Gloger",
      "email": "michael.gloger@accenture.com"
    }
  ],
  "dependencies": {
    "bases": "^0.2.1",
    "debug": "^2.3.0",
    "doctoc": "^1.2.0",
    "glob": "^7.1.1",
    "lodash": "^4.16.6",
    "rimraf": "^2.5.4",
    "stack-trace": "0.0.9"
  },
  "description": "A Framework for creating Amazon Echo (Alexa) skills using Node.js",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.9.1",
    "eslint-config-standard": "^6.2.1",
    "eslint-plugin-promise": "^3.3.1",
    "eslint-plugin-standard": "^2.0.1",
    "hapi": "^15.2.0",
    "i18next": "^4.1.0",
    "i18next-node-fs-backend": "^0.1.3",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2",
    "nodemon": "^1.11.0",
    "request": "^2.78.0",
    "sinon": "^1.17.6"
  },
  "directories": {},
  "dist": {
    "shasum": "1502411762cf35c323d708a72a9ef9515d06ff14",
    "tarball": "https://registry.npmjs.org/alexia/-/alexia-2.4.0.tgz"
  },
  "engines": {
    "node": ">=4.2.0"
  },
  "files": [
    "LICENSE",
    "README.md",
    "src/"
  ],
  "gitHead": "75b9ec7127e4bd4aee7eb0473a6de98f42ed8734",
  "homepage": "https://github.com/Accenture/alexia#readme",
  "keywords": [
    "alexa",
    "alexia",
    "echo",
    "amazon",
    "voice",
    "skill",
    "intent"
  ],
  "license": "MIT",
  "main": "src/alexia.js",
  "maintainers": [
    {
      "name": "glogo",
      "email": "gloger.michael@gmail.com"
    }
  ],
  "name": "alexia",
  "optionalDependencies": {},
  "readme": "![Alexia](alexia-logo.png \"Alexia\")\r\n\r\nA Framework for creating Amazon Echo (Alexa) skills using Node.js\r\n\r\n  [![NPM Version][npm-image]][npm-url]\r\n  [![Build Status][travis-image]][travis-url]\r\n  [![Coverage Status][coveralls-image]][coveralls-url]\r\n\r\n```javascript\r\nconst alexia = require('alexia');\r\nconst app = alexia.createApp();\r\n\r\napp.intent('HelloIntent', 'Hello', () => {\r\n  return 'Hello from Alexia app';\r\n});\r\n```\r\n\r\n**HTTPS Server**\r\n\r\n```javascript\r\napp.createServer().start();\r\n```\r\n\r\n*or*\r\n\r\n**AWS Lamba**\r\n\r\n```javascript\r\nexports.handler = (event, context, callback) => {\r\n  app.handle(event, data => {\r\n    callback(null, data);\r\n  });\r\n};\r\n```\r\n\r\n## Installation\r\n\r\n`npm install alexia --save`\r\n\r\nOptional: requires [Handling Amazon Requests manually](#handling-amazon-requests-manually)\r\n\r\n`npm install hapi --save`\r\n\r\n## Overview\r\n\r\nAlexia helps you to write Amazon Echo skills using Node.js. This framework handles Amazon Echo requests and automatically calls intents in your application. See the [Features and Samples](#features-and-samples)\r\n\r\n## Table of Contents\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n\r\n\r\n- [Terminology](#terminology)\r\n- [Features and Samples](#features-and-samples)\r\n  - [Create App](#create-app)\r\n  - [Set default value for shouldEndSession](#set-default-value-for-shouldendsession)\r\n  - [Create Intents](#create-intents)\r\n  - [Create Welcome Message](#create-welcome-message)\r\n  - [Built-in Intents](#built-in-intents)\r\n  - [Slots](#slots)\r\n  - [Custom Slots](#custom-slots)\r\n  - [Session Attributes](#session-attributes)\r\n  - [Cards](#cards)\r\n  - [Reprompt](#reprompt)\r\n  - [SSML](#ssml)\r\n  - [Read Original Request Data](#read-original-request-data)\r\n  - [Asynch Intent Handling](#asynch-intent-handling)\r\n  - [Generate Speech Assets](#generate-speech-assets)\r\n  - [Save Speech Assets To Directory](#save-speech-assets-to-directory)\r\n  - [Register Intents using pattern matching](#register-intents-using-pattern-matching)\r\n  - [Actions](#actions)\r\n  - [Localization](#localization)\r\n  - [Handling Amazon Requests](#handling-amazon-requests)\r\n  - [Handling Amazon Requests Manually](#handling-amazon-requests-manually)\r\n- [Deploy](#deploy)\r\n  - [Heroku](#heroku)\r\n  - [AWS Lambda](#aws-lambda)\r\n- [Create Alexa skill](#create-alexa-skill)\r\n- [Testing](#testing)\r\n  - [Device Testing](#device-testing)\r\n  - [Echoism.io (Online Simulator)](#echoismio-online-simulator)\r\n  - [Unit Testing](#unit-testing)\r\n- [Debugging](#debugging)\r\n- [Scripts](#scripts)\r\n- [Contributing](#contributing)\r\n- [License](#license)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Terminology\r\n\r\nCreating new skills for Amazon Echo using alexia requires you to understand some basic terms. This part should clarify the most of them.\r\n\r\n- **Skill** - Alexa app\r\n- **Intent** - Invoked if one of intent `utterances` is recognized\r\n- **Utterance** - Voice input example\r\n- **Slot** - Variable part of utterance\r\n- **Session Attributes** - data persisted through the session\r\n- **Cards** - visual output displayed in [Alexa app](http://alexa.amazon.com/)\r\n\r\n## Features and Samples\r\n\r\n### Create App\r\n\r\nTo create new app simply call `alexia.createApp()`\r\n\r\n```javascript\r\nconst alexia = require('alexia');\r\nconst app = alexia.createApp('MyApp');\r\n```\r\n\r\n### Set default value for shouldEndSession\r\n\r\nIf you want to set default value of shouldEndSession response property you can do it by specifying `shouldEndSessionByDefault` property in App options.\r\n\r\n```javascript\r\nconst app = alexia.createApp('MyApp', {shouldEndSessionByDefault: true});\r\n```\r\n\r\nAlternatively you can use `app.setShouldEndSessionByDefault()` method.\r\n\r\n```javascript\r\napp.setShouldEndSessionByDefault(true);\r\n```\r\n\r\n### Create Intents\r\n\r\nYou have multiple options for creating intents. You can create named intents, intents with automatically generated name or intents with multiple sample utterances.\r\n\r\n```javascript\r\n// Named intent\r\napp.intent('MyIntent', 'Hello Alexa my name is Michael', () => 'Hi Michael');\r\n\r\n// Generated intent name\r\napp.intent(null, 'Hello Alexa what is in my calendar for today', () => 'Your calendar is empty. Enjoy');\r\n\r\n// Intent with more utterances\r\napp.intent('AnotherIntent', ['Hello', 'Hi', 'Whats up'], () => 'Hello yourself');\r\n```\r\n\r\n### Create Welcome Message\r\n\r\nIf you want more than just a generic \"Welcome\" from Alexa, you can use the onStart method to help you achieve that.\r\n\r\n```javascript\r\napp.onStart(() => {\r\n  return 'Welcome to My Hello World App, say hello world to get started, or say help to get more instructions';\r\n});\r\n```\r\n\r\n### Built-in Intents\r\n\r\nAmazon Alexa Skills Kit provides a collection of built-in intents. These are intents for very common actions. Alexia provides convenient methods for their reusing and extending.\r\n\r\nList of built-in intents: `cancel`, `help`, `next`, `no`, `pause`, `previous`, `repeat`, `resume`, `startOver`, `stop`, `yes`.\r\n\r\nSee official Amazon docs: [Available Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/implementing-the-built-in-intents#Available Built-in Intents)\r\n\r\n```javascript\r\n// Use default built-in utterances\r\napp.builtInIntent('stop', () => 'Stopping now');\r\n\r\n// Extend built-in utterances\r\napp.builtInIntent('stop', 'Stop now', () => 'Stopping now');\r\napp.builtInIntent('stop', ['Stop now', 'Please stop'], () => 'Stopping now');\r\n```\r\n\r\n### Slots\r\n\r\nAs mentioned in [Terminology](#terminology) section - slots represent variable part of user input in utterances. To make their creation bit easier our utterances contain slot name with type. These samples are converted into common utterances recognized by Alexa and slots are included in intentSchema.\r\n\r\n```javascript\r\napp.intent('SlotIntent', 'My number is {num:Number}', (slots) => {\r\n  return `Your number is ${slots.num}`;\r\n});\r\n```\r\n\r\n### Custom Slots\r\n\r\nAlexia helps you to create custom slots by specifying its `name` and `utterances`\r\n\r\n```javascript\r\napp.customSlot('Name', ['Arnold', 'Otto', 'Walda', 'Pete']);\r\n\r\napp.intent('CustomSlotIntent', 'My name is {name:Name}', (slots) => {\r\n  return `Hi ${slots.name}`;\r\n});\r\n```\r\n\r\n### Session Attributes\r\n\r\nIntent can be resolved using simple string (a text response) or more complex `responseObject`. Its attribute `attrs` will override current sessionAttributes. If you wish to extend current session attributes you can use for example `Object.assign` method. Make sure you set `end` attribute to `false` to keep the session open (default: `true`). See [Session Attributes example](examples/session-attributes.js). Session attribute `previousIntent` is reserved.\r\n\r\n```javascript\r\napp.intent('AttrsIntent', 'session attributes test', (slots, attrs) => {\r\n  return {\r\n    text: 'Alexa response text here',\r\n    attrs: {\r\n      attr1: 'Whatever to be remebered in this session'\r\n    },\r\n    end: false\r\n  };\r\n});\r\n```\r\n\r\n### Cards\r\n\r\nTo display card in Alexa app add configuration to responseObject `card` property\r\n\r\n```javascript\r\napp.intent('CardsIntent', 'Whats in shopping cart', () => {\r\n  return {\r\n    text: 'Your shopping cart contains Amazon Echo Device and 2 more items. To see the full list check out your Alexa app',\r\n    card: {\r\n      title: 'Shopping cart',\r\n      content: 'You shopping cart contains: Amazon Echo, Amazon Tap, Echo Dot'\r\n    }\r\n  };\r\n});\r\n```\r\n\r\n### Reprompt\r\n\r\nTo add reprompt text to your response add `reprompt` string value to responseObject\r\n\r\n```javascript\r\napp.intent('RepromptIntent', 'Send email to Mom', () => {\r\n  return {\r\n    text: 'What is the text of your message',\r\n    reprompt: 'Sorry I did not catch it. What is the text of your message'\r\n  };\r\n});\r\n```\r\n\r\n### SSML\r\n\r\nUse SSML to create more complex text responses. Just set the `ssml` parameter of responseObject to `true` and enter `SSML` into `text` property. See official Amazon docs: [Speech Synthesis Markup Language](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference)\r\n\r\n```javascript\r\napp.intent('SSMLIntent', 'what are the digits of number {num:Number}', (slots) => {\r\n  return `<say-as interpret-as=\"digits\">${number}</say-as>`\r\n});\r\n```\r\n\r\n### Read Original Request Data\r\n\r\nYou can access the original Amazon request data from third parameter of handler. See example below.\r\n\r\n```javascript\r\napp.intent('OriginalRequestData', 'read original request data', (slots, attrs, data) => {\r\n  console.log('userId', data.session.user.userId);\r\n  return 'Hi';\r\n});\r\n```\r\n\r\n### Asynch Intent Handling\r\n\r\nFor asynchronous intent handling add fourth parameter to your handler callback and call it when your response is ready. The response structure is identical to responseObject.\r\n\r\n```javascript\r\napp.intent('AsyncIntent', 'Search for something in database', (slots, attrs, data, done) => {\r\n  setTimeout(() => {\r\n    done('Work complete');\r\n  }, 120);\r\n});\r\n```\r\n\r\n### Generate Speech Assets\r\n\r\nTo minimize manual work needed while deploying your Alexa skills you can use our speechAssets generator. This helps you to create `intentSchema`, `sampleUtterances` and `customSlots` for your apps.\r\n\r\nSpeech assets consists of:\r\n  - **intentSchema** - array of intents with slots\r\n  - **utterances** - phrases that are used to invoke intents\r\n  - **customSlots** - custom slot types with samples\r\n\r\n\r\n For more information see [interaction model reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interaction-model-reference)\r\n\r\n```javascript\r\nconst speechAssets = app.speechAssets(); // object\r\nconsole.log(speechAssets.toString()); // stringified version - f.e. copy paste from console\r\n```\r\n\r\n### Save Speech Assets To Directory\r\n\r\nIf you want to use your assets (`intentSchema`, `sampleUtterances` and `customSlots`) later and have them stored, this function will do it for you. You can pass the name of your directory or leave it empty which defaults to `/speechAssets`.\r\n\r\nDirectory structure looks like this:\r\n```\r\n├── speechAssets\r\n    ├── intentSchema.json\r\n    ├── utterances.txt\r\n    └── customSlots\r\n        ├── Name.txt\r\n        ├── Age.txt\r\n        ...\r\n```\r\n\r\n```javascript\r\napp.saveSpeechAssets('speechAssets'); // No argument leads to default value 'speechAssets'\r\n```\r\n\r\n### Register Intents using pattern matching\r\n\r\nIf your intents are located in separate files you need to register them to the app. One way how to do this is to wrap intent into function taking `app` as a parameter.\r\n\r\n**src/intents/hello-intent.js**\r\n\r\n```javascript\r\nmodule.exports = app => app.intent('HelloIntent', 'hello', () => {\r\n  return 'Hello';\r\n});\r\n```\r\n\r\nNext you need to register it by importing it manually and supplying the `app` as a parameter.\r\n\r\nYou can also use our shorthand function for finding and registering all intents files that match pattern. See [node-glob](https://github.com/isaacs/node-glob) for more pattern matching examples.\r\n\r\n**src/app.js**\r\n\r\n```javascript\r\napp.registerIntents('src/intents/*-intent.js');\r\n```\r\n\r\n### Actions\r\n\r\nFeature of Alexia that helps you to control flow of the intents. To understand it easier see the code below.\r\n\r\nBy defining the action you enable transition from one intent to another. When no actions are specified, every intent transition is allowed.\r\n\r\nAction properties `from` and `to` can be defined as `string` (one intent), `array` (multiple intents) or `'*'` (all intents).\r\n\r\nEach action could have condition to check whether the transition should be handled or the fail method should be invoked. If no fail method is defined `app.defaultActionFail()` is invoked when condition of handling is not met or the action (transition) is not defined.\r\n\r\n```javascript\r\n// Allow transition from any intent to `intent1`.\r\napp.action({\r\n  from: '*',\r\n  to: 'intent1'\r\n});\r\n\r\n// Allow transition from `@start` intent to `intent2`.\r\napp.action({\r\n  from: '@start',\r\n  to: 'intent2'\r\n});\r\n\r\n// Allow transition from `intent1` to `intent2` if condition is met using custom fail handler\r\napp.action({\r\n  from: 'intent1',\r\n  to: 'intent2',\r\n  if: (slots, attrs) => slots.pin === 1234,\r\n  fail: (slots, attrs) => 'Sorry, your pin is invalid'\r\n});\r\n\r\n// Allow transition from `intent2` to `intent3` and also `intent4`.\r\napp.action({\r\n  from: 'intent2',\r\n  to: ['intent3', 'intent4']\r\n});\r\n\r\n// Set default fail handler\r\napp.defaultActionFail(() => 'Sorry, your request is invalid');\r\n```\r\n\r\n### Localization\r\n\r\nAlexia uses [i18next](https://github.com/i18next/i18next) for localizing response texts, utterances and custom slots.\r\n\r\nFor better understanding see localized app example: [examples/multi-language](examples/multi-language).\r\n\r\nThese are the steps required to localize your existing application:\r\n\r\n1. Install dependencies: `npm install --save i18next i18next-node-fs-backend`\r\n2. Initialize `i18next` instance - see [the example app](examples/multi-language/multi-language-app.js)\r\n3. Set `i18next` instance to your app to enable localization: `app.setI18next(i18next)`\r\n4. Create directory with all locales\r\n5. Ommit utterances in all intents and access the translate function using `app.t('key')` \r\n\r\nLocalized intent example:\r\n\r\n```javascript\r\napp.intent('LocalizedIntent', slots => {\r\n  return app.t('text', slots);\r\n});\r\n```\r\n\r\nExample `locales` directory structure:\r\n\r\n```\r\nlocales/\r\n├── en/                  # Directory for all en locales\r\n│   ├── translation.js   # Translations of response texts and utterances for each intent\r\n│   └── custom-slots.js  # Translations of custom slots\r\n└── de/                  # Directory for all de locales ...\r\n    ├── translation.js\r\n    └── custom-slots.js\r\n```\r\n\r\nLocalization notes:\r\n- You can localize `LaunchRequest` or `SessionEndedRequest` as well. Just add the entry along the intent names in translations\r\n- To localize built in intents, say `AMAZON.YesIntent` use entry names after the `.` suffix. So `AMAZON.YesIntent` becomes just `YesIntent`\r\n- To access the translation use: `app.t('key')` This `key` needs to be nested in the current intent translation entry. You don't have to use the full path to the key - the prefix is automatically added depending on the current request\r\n- Each intent translation should have `utterances` property. We support the `richUtterances` syntax f.e: `My age is {age:Number}`\r\n- The locale to be used is decided depending on the `data.request.locale` Its value could be currently one of: `en-US`, `en-GB`, `de-DE`\r\n\r\n### Handling Amazon Requests\r\n\r\nTo handle Amazon requests you need to create HTTP server with POST route. You can take advantage or our API to create Hapi server so you don't have to create it manually. This requires to install `hapi` as dependency:\r\n\r\n```\r\nnpm install hapi --save\r\n```\r\n\r\n\r\n```javascript\r\nconst options = {\r\n  path: '/', // defaults to: '/'\r\n  port: 8888 // defaults to: process.env.PORT or 8888\r\n};\r\nconst server = app.createServer(options);\r\n```\r\n\r\n### Handling Amazon Requests Manually\r\n\r\nYou can create your own HTTP from scratch to handle Amazon requests manually. See below example with [Hapi](http://hapijs.com/) server\r\n\r\n```javascript\r\nconst Hapi = require('hapi');\r\nconst server = new Hapi.Server();\r\nconst app = require('./app'); // Your app\r\n\r\nserver.connection({\r\n  port: process.env.PORT || 8888\r\n});\r\n\r\nserver.route({\r\n  path: '/',\r\n  method: 'POST',\r\n  handler: (request, response) => {\r\n    app.handle(request.payload, (data) => {\r\n      response(data);\r\n    });\r\n  }\r\n});\r\n\r\nserver.start((err) => {\r\n  if (err) throw err;\r\n  console.log('Server running at:', server.info.uri);\r\n  app.saveSpeechAssets();\r\n});\r\n```\r\n\r\n## Deploy\r\n\r\n### Heroku\r\n\r\n 1. Create free [Heroku](https://www.heroku.com) acount\r\n 2. Install [Heroku toolbelt](https://toolbelt.heroku.com/)\r\n 3. Be sure to have `start` script defined in `package.json`\r\n 4. Be sure to create server handler on POST endpoint. See [Handling Amazon Requests](#handling-amazon-requests)\r\n 5. Run `git init` if git was not yet initialized in your project\r\n 6. Run `heroku create` in project directory\r\n 7. Run `git push heroku master`\r\n 8. Copy your server URL to your Alexa Skill configuration. See [Create Alexa Skill](#create-alexa-skill)\r\n\r\n### AWS Lambda\r\n\r\n1. Create account and login to [AWS Console](https://console.aws.amazon.com/console)\r\n2. Create new Lambda function\r\n3. Set function invocation to `index.handler`\r\n4. Add Alexa Skills Kit trigger\r\n5. Export `handler` in your index.js file\r\n6. Upload zipped project folder into AWS Lambda\r\n7. Copy Lambda function ARN to your Alexa Skill configuration\r\n\r\n```javascript\r\nexports.handler = (event, context, callback) => {\r\n  app.handle(event, data => {\r\n    callback(null, data);\r\n  });\r\n};\r\n```\r\n\r\n## Create Alexa skill\r\n\r\n- Login to your [Amazon developer account](https://developer.amazon.com)\r\n- Select Apps & Services\r\n- Select Alexa\r\n- Select Alexa Skills Kit\r\n- Add a new Skill\r\n- Set skill info required to run app:\r\n\r\n  **Skill Information**\r\n    - Name: Name of your app, can be whatever\r\n    - Invocation Name: Short phrase or abbreviation of your app name. Will be used to start your app by saying: `Alexa, start MyApp` if your invocation name is `MyApp`\r\n\r\n  **Interaction model**\r\n    - Use our speech assets generator `app.saveSpeechAssets()` to generate and save speech assets to `speechAssets` directory\r\n    - Custom Slot Types: Click `Add Slot Type`\r\n        - Type: name of custom slot type\r\n        - Values: contents of `speechAssets/customSlots/**` or enter custom slot samples manually\r\n        - Do this for each custom slot\r\n    - Intent Schema: enter contents of `speechAssets/intentSchema.json`\r\n    - Sample Utterances: enter contents of `speechAssets/sampleUtterances.txt`\r\n\r\n  **Configuration**\r\n    - Endpoint: select HTTPS and enter url or your publicly accesible server\r\n\r\n  **SSL Certificate**\r\n    - Select what applies to your SSL certificate\r\n    - Could remain unselected when no certificate is required\r\n\r\n  **Test**\r\n    - Enable skill testing on this account\r\n    - Enter one of your utterances and click `Ask MyApp`\r\n\r\n## Testing\r\n\r\n### Device Testing\r\n\r\n- Connect to your Amazon Echo device using the same developer account where you created skill\r\n- Enable application for testing\r\n- Say `Alexa, start <myApp>`\r\n\r\n### Echoism.io (Online Simulator)\r\n\r\n- Open [Echoism.io](https://echosim.io/)\r\n- Login with your Amazon developer account\r\n- Interact with Alexa simulator\r\n\r\n### Unit Testing\r\n\r\nEach application should be unit-tested. We are exposing simple API helping you to create sample Alexa requests for testing and debugging.\r\n\r\n```javascript\r\nalexia.createRequest({\r\n  type: 'IntentRequest',\r\n  name: 'UnknownIntent',\r\n  slots: {},\r\n  attrs: {},\r\n  appId: 'amzn1.echo-sdk-123456',\r\n  sessionId: 'SessionId.357a6s7',\r\n  userId: 'amzn1.account.abc123',\r\n  requestId: 'EdwRequestId.abc123456',\r\n  timestamp: '2016-06-16T14:38:46Z',\r\n  locale: 'en-US',\r\n  new: false\r\n});\r\n```\r\n\r\nAll the properties optional and defaults to the values you see in the example above. Sample usage:\r\n\r\n```javascript\r\nalexia.createRequest({type: 'IntentRequest', name: 'HelloIntent', slots: ..., attrs: ...});\r\nalexia.createIntentRequest('HelloIntent', slots, attrs, isNew, appId); // Shorter version - does not support all of the properties\r\n```\r\n\r\nBefore writing unit tests make sure to install all the dependencies. In our example we will be using mocha and chai with expect.\r\n\r\n```bash\r\nnpm install mocha chai expect --save-dev\r\n```\r\n\r\nExample below illustrates simple unit testing for intentRequest. Testing of launchRequest or sessionEndedRequest would look the same\r\n\r\n```javascript\r\nconst expect = require('chai').expect;\r\nconst alexia = require('alexia');\r\nconst app = require('./path-to-app.js');\r\n\r\n// Create sample requests\r\nconst launchRequest = alexia.createLaunchRequest();\r\nconst sessionEndedRequest = alexia.createSessionEndedRequest();\r\nconst intentRequest = alexia.createIntentRequest('MyIntent');\r\n\r\n// Sample MyIntent test suite\r\ndescribe('(Intent) MyIntent', () => {\r\n  it('should handle MyIntent', done => {\r\n\r\n    // Simulate Alexa request handling\r\n    app.handle(intentRequest, response => {\r\n      \r\n      // Test the response\r\n      expect(response).to.be.defined;\r\n      done();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## Debugging\r\n\r\nWe are using [debug](https://github.com/visionmedia/debug) package to debug our alexia applications. To start application in debug mode export environment variable `DEBUG`\r\n\r\nExamples:\r\n\r\n- `DEBUG=alexia:info` - print only info logs\r\n- `DEBUG=alexia:debug` - print only debug logs\r\n- `DEBUG=alexia:*` - print all logs\r\n\r\nTo start your app with info logs run in terminal:\r\n\r\n```bash\r\nDEBUG=alexia:info npm start\r\n```\r\n\r\n## Scripts\r\n\r\n- `npm test` - run unit tests\r\n- `npm test:dev` - run unit tests in development mode using nodemon as watcher\r\n- `npm run lint` - run eslint\r\n- `npm run lint:fix` - run eslint and automatically fix problems\r\n- `npm run toc` - update TOC in README.md\r\n\r\n## Contributing\r\n\r\nAlexia is an open source project and we encourage contributions. Please make sure to cover your code with unit tests.\r\n\r\nAfter updating README.md please run: `npm run toc`\r\n\r\nFor more information refer to general guide [Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/)\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n  [npm-image]: https://img.shields.io/npm/v/alexia.svg\r\n  [npm-url]: https://npmjs.org/package/alexia\r\n  [travis-image]: https://img.shields.io/travis/Accenture/alexia/master.svg\r\n  [travis-url]: https://travis-ci.org/Accenture/alexia\r\n  [coveralls-image]: https://coveralls.io/repos/github/Accenture/alexia/badge.svg?branch=master\r\n  [coveralls-url]: https://coveralls.io/github/Accenture/alexia?branch=master\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Accenture/alexia.git"
  },
  "scripts": {
    "lint": "eslint .",
    "lint:fix": "npm run lint -- --fix",
    "test": "istanbul cover node_modules/mocha/bin/_mocha -- -u exports --reporter spec",
    "test-lcov": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- -u exports --reporter spec",
    "test:dev": "nodemon --exec \"mocha || true\"",
    "toc": "doctoc README.md --github"
  },
  "version": "2.4.0"
}
